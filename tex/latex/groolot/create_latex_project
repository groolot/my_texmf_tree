#!/bin/bash

#	-------------------------------------------------------------------
#
#	Shell program to Create a LaTeX project from a template.
#
#	Copyright 2008-2018,  <groolot@groolot.net>.
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License as
#	published by the Free Software Foundation; either version 2 of the
#	License, or (at your option) any later version.
#
#	This program is distributed in the hope that it will be useful, but
#	WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#	General Public License for more details.
#
#
#	-------------------------------------------------------------------


#	-------------------------------------------------------------------
#	Constants
#	-------------------------------------------------------------------

PROGNAME=$(basename $0)
AUTHOR="Gr√©gory DAVID <groolot@groolot.net>"
VERSION="0.0.3"
TEMPLATE_DIR=~/texmf/tex/latex/groolot


#	-------------------------------------------------------------------
#	Functions
#	-------------------------------------------------------------------


function clean_up
{

#	-----------------------------------------------------------------------
#	Function to remove temporary files and other housekeeping
#		No arguments
#	-----------------------------------------------------------------------

	rm -f ${TEMP_FILE1}
}


function error_exit
{

#	-----------------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	-----------------------------------------------------------------------


	echo "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}


function graceful_exit
{

#	-----------------------------------------------------------------------
#	Function called for a graceful exit
#		No arguments
#	-----------------------------------------------------------------------

	clean_up
	exit
}


function signal_exit
{

#	-----------------------------------------------------------------------
#	Function to handle termination signals
#		Accepts 1 argument:
#			signal_spec
#	-----------------------------------------------------------------------

	case $1 in
		INT)	echo "$PROGNAME: Program aborted by user" >&2
			clean_up
			exit
			;;
		TERM)	echo "$PROGNAME: Program terminated" >&2
			clean_up
			exit
			;;
		*)	error_exit "$PROGNAME: Terminating on unknown signal"
			;;
	esac
}


function make_temp_files
{

#	-----------------------------------------------------------------------
#	Function to create temporary files
#		No arguments
#	-----------------------------------------------------------------------

	# Use user's local tmp directory if it exists

	if [ -d ~/tmp ]; then
		TEMP_DIR=~/tmp
	else
		TEMP_DIR=/tmp
	fi

	# Temp file for this script, using paranoid method of creation to
	# insure that file name is not predictable.  This is for security to
	# avoid "tmp race" attacks.  If more files are needed, create using
	# the same form.

	TEMP_FILE1=$(mktemp -q "${TEMP_DIR}/${PROGNAME}.$$.XXXXXX")
	if [ "$TEMP_FILE1" = "" ]; then
		error_exit "cannot create temp file!"
	fi
}


function usage
{

#	-----------------------------------------------------------------------
#	Function to display usage message (does not exit)
#		No arguments
#	-----------------------------------------------------------------------

	  echo "Usage: ${PROGNAME} [ -h | --help ] [ -b | -c | -e | -g | -G | -l ] output_directory"
}


function helptext
{

#	-----------------------------------------------------------------------
#	Function to display help message for program
#		No arguments
#	-----------------------------------------------------------------------

	local tab=$(echo -en "\t")

	cat <<- -EOF-
	${PROGNAME} ver. ${VERSION}, ${AUTHOR}
	This is a program to create a LaTeX project from a template (Article, Exam or Beamer for now) and configure it with Git.

	$(usage)

	Options:

	-h, --help
$tab Display this help message and exit.

	-b output_directory
$tab Specify the output directory of the Beamer project. Create it if not existing.

	-c output_directory
$tab Specify the output directory of the Cours project. Create it if not existing.

	-e output_directory
$tab Specify the output directory of the Exam project. Create it if not existing.

	-g output_directory
$tab Add LaTeX .gitignore file to the output directory. Create it if not existing.

	-G output_directory
$tab Add .gitlab-ci.yml file to the output directory. Create it if not existing.

	-l output_directory
$tab Add .latexmkrc file to the output directory. Create it if not existing.
-EOF-
}

function check_output
{
    OUTPUT=$1
    if [ "${OUTPUT}" = "" ]; then
	error_exit "You must specify an output directory"
    fi
    if [ ! -d ${TEMPLATE_DIR} ]; then
	error_exit "The specified template directory ${TEMPLATE_DIR} does not exist"
    fi
    if [ ! -d ${OUTPUT} ]; then
        mkdir -p ${OUTPUT} || error_exit "The output directory $1 can not be created"
    else
        if [ ! -w ${OUTPUT} ]; then
	    error_exit "The specified output directory $1 is not writable"
	fi
    fi
}

function create_project
{
#	-----------------------------------------------------------------------
#	Function to create the project from the template
    #		Accepts 2 arguments:
    #			$1 = output directory
    #     $2 = project type [cours, exam, beamer]
    #	-----------------------------------------------------------------------
    OUTPUT=$1
    check_output $OUTPUT
    case $2 in
        cours|exame|beamer)
            for file_template in main.$2 ; do
                if [ ! -f ${OUTPUT}/${file_template}.tex ]; then
                    cp -Rfv ${TEMPLATE_DIR}/${file_template}.tex ${OUTPUT}/ || error_exit "The copy of the ${file_template} has not been reached"
                fi
            done
    esac
}

function add_gitlab_ci
{
    #	-----------------------------------------------------------------------
    #	Function to add the gitlab CI/CD configuration file to the project followed by Git
    #		Accepts 1 argument:
    #			output directory
    #	-----------------------------------------------------------------------
    OUTPUT=$1
    check_output $OUTPUT
    pushd ${OUTPUT}
    git init
    cat > .gitlab-ci.yml <<EOF
image: aergus/latex

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_HOOKS_DIR: .git/hooks
  GIT_POST_CHECKOUT_HOOK_FILE: .git/hooks/post-checkout

before_script:
  - pushd ~
  - git clone https://framagit.org/groolot/my_texmf_tree.git texmf
  - popd
  - apt-get update -qq && apt-get install -y -qq graphviz bookletimposer

build:
  only:
    - tags
  script:
    - mkdir -p \$GIT_HOOKS_DIR
    - cp \$HOME/texmf/tex/latex/groolot/gitinfo_hook \$GIT_POST_CHECKOUT_HOOK_FILE
    - chmod 755 \$GIT_POST_CHECKOUT_HOOK_FILE
    - git checkout \$CI_COMMIT_TAG
    - latexmk -pdf \$CI_PROJECT_NAME.tex
    - bookletimposer --no-gui --booklet --pages-per-sheet=2x1 --format=A4 --output=\$CI_PROJECT_NAME.booklet.pdf \$CI_PROJECT_NAME.pdf
  artifacts:
    paths:
      - \$CI_PROJECT_NAME.pdf
      - \$CI_PROJECT_NAME.booklet.pdf
EOF
    git add .gitlab-ci.yml
    git commit -m "Ajout de la configuration GitLab pour la CI/CD"
    popd
}

function add_latexmkrc
{
    #	-----------------------------------------------------------------------
    #	Function to add the Latexmk configuration file to the project followed by Git
    #		Accepts 1 argument:
    #			output directory
    #	-----------------------------------------------------------------------
    OUTPUT=$1
    check_output $OUTPUT
    pushd ${OUTPUT}
    git init
    cat > .latexmkrc <<EOF
\$pdflatex = 'pdflatex --shell-escape %O %S';
\$recorder = 1;
\$hash_calc_ignore_pattern{'pdf'} = '.*';

add_cus_dep('glo', 'gls', 0, 'run_makeglossaries');
add_cus_dep('acn', 'acr', 0, 'run_makeglossaries');

sub run_makeglossaries {
  if ( \$silent ) {
    system "makeglossaries -q '\$_[0]'";
  }
  else {
    system "makeglossaries '\$_[0]'";
  };
}
push @generated_exts, 'glo', 'gls', 'glg';
push @generated_exts, 'acn', 'acr', 'alg';
\$clean_ext .= ' %R.ist %R.xdy';

add_cus_dep('dot', 'pdf', 0, 'run_dot');
sub run_dot {
  if ( \$silent ) {
    system "dot -Gcharset=latin1 -Tpdf -o'\$_[0].pdf' '\$_[0].dot'";
  }
  else {
    system "dot -v -Gcharset=latin1 -Tpdf -o'\$_[0].pdf' '\$_[0].dot'";
  };
  &cus_dep_require_primary_run;
}
EOF
    git add .latexmkrc
    git commit -m "Ajout de la configuration locale pour Latexmk"
    popd
}

function add_gitignore
{
    #	-----------------------------------------------------------------------
    #	Function to add the .gitignore configuration file to the project followed by Git
    #		Accepts 1 argument:
    #			output directory
    #	-----------------------------------------------------------------------
    OUTPUT=$1
    check_output $OUTPUT
    pushd ${OUTPUT}
    git init
    cat > .gitignore <<EOF
*.dot
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
*.dvi
*-converted-to.*
*.ps
*.eps
*.pdf
.pdf
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.brf
*.run.xml
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync
*.alg
*.loa
acs-*.bib
*.thm
*.nav
*.snm
*.vrb
*.cpt
*.lox
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs
*-gnuplottex-*
*.gaux
*.gtex
*.brf
*.tikz
*-tikzDictionary
*.lol
*.idx
*.ilg
*.ind
*.ist
*.maf
*.mlf
*.mlt
*.mtc
*.mtc[0-9]
*.mtc[1-9][0-9]
*.fmt
*.nlo
*.upa
*.upb
*.pytxcode
pythontex-files-*/
*.loe
*.dpth
*.md5
*.auxlock
*.tdo
*.lod
EOF
    git add .gitignore
    git commit -m "Ajout du .gitignore"
    popd
}

function make_project_git_tracked
{
#	-----------------------------------------------------------------------
#	Function to make the project followed by Git
#		Accepts 1 argument:
#			output directory
#	-----------------------------------------------------------------------
    OUTPUT=$1
    check_output $OUTPUT
    pushd ${OUTPUT}
    git init
    GITINFO2_HOOKFILE=/usr/share/doc/texlive-doc/latex/gitinfo2/post-xxx-sample.txt
    cp ${GITINFO2_HOOKFILE} .git/hooks/post-checkout
    cp ${GITINFO2_HOOKFILE} .git/hooks/post-commit
    cp ${GITINFO2_HOOKFILE} .git/hooks/post-merge
    chmod a+x .git/hooks/post-*
    git submodule add https://framagit.org/groolot/style.git style
    git add style
    git commit -m "Import initial et utilisation du sous mmodule de style"
    pushd style
    git remote add writable git@framagit.org:groolot/style.git
    popd
    add_gitignore .
    add_latexmkrc .
    add_gitlab_ci .
    popd
}

#	-------------------------------------------------------------------
#	Program starts here
#	-------------------------------------------------------------------

##### Initialization And Setup #####

# Set file creation mask so that all files are created with 600 permissions.

umask 022


# Trap TERM, HUP, and INT signals and properly exit

trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Create temporary file(s)

make_temp_files


##### Command Line Processing #####

if [ "$1" = "--help" ]; then
	helptext
	graceful_exit
fi

while getopts ":hb:c:e:g:G:l:" opt; do
	  case $opt in
	      b )	create_project $OPTARG beamer
		        make_project_git_tracked $OPTARG
            ;;
	      c ) create_project $OPTARG cours
		        make_project_git_tracked $OPTARG
            ;;
	      e )	create_project $OPTARG exam
		        make_project_git_tracked $OPTARG
            ;;
        g ) add_gitignore $OPTARG
            ;;
        G ) add_gitlab_ci $OPTARG
            ;;
        l ) add_latexmkrc $OPTARG
            ;;
	      h )	helptext
            ;;
	      * )	usage
		        clean_up
		        exit 1
	esac
done

graceful_exit

